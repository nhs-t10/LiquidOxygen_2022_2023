<?xml version="1.0"?>
<!DOCTYPE module PUBLIC "-//Puppy Crawl//DTD Check Configuration 1.2//EN" "http://www.puppycrawl.com/dtds/configuration_1_2.dtd">
<!-- Adapted from https://github.com/FabricMC/fabric/blob/fa25da992dd734b4bcc80b496d23de9ae6940d9c/checkstyle.xml -->

<module name="Checker">
    <property name="charset" value="UTF-8"/>
    <property name="fileExtensions" value="java"/>
    <property name="localeLanguage" value="en"/>
    <property name="localeCountry" value="US"/>
    <property name="tabWidth" value="4"/>

    <module name="NewlineAtEndOfFile"/>

    <!-- set max line length -->
    <module name="LineLength">
        <property name="max" value="120" />
    </module>

    <module name="RegexpSingleline">
        <property name="format" value="\s+$"/>
        <property name="message" value="Whitespace at the end of a line is not allowed"/>
    </module>

    <module name="RegexpMultiline">
        <property name="format" value="\n[\t ]*\r?\n[\t ]*\r?\n"/>
        <property name="message" value="adjacent blank lines"/>
    </module>

    <!-- disallow blank after { -->
    <module name="RegexpMultiline">
        <property name="format" value="\{[\t ]*\r?\n[\t ]*\r?\n"/>
        <property name="message" value="An empty line after a '{' is not allowed"/>
    </module>

    <!-- disallow blank before } -->
    <module name="RegexpMultiline">
        <property name="format" value="\n[\t ]*\r?\n[\t ]*\}"/>
        <property name="message" value="An empty line before a '}' is not allowed"/>
    </module>

    <!-- require blank before { in the same indentation level -->
    <module name="RegexpMultiline">
        <!-- FabricMC has more documentation for this regex expression if you're curious -->
        <property name="format" value="(?&lt;=\n)([\t]+)(?:[^/\r\n \t][^\r\n]*|/[^/\r\n][^\r\n]*|[^/\r\n][^\r\n]*(\r?\n\1//[^\r\n]*)+)\r?\n\1(|(if|do|while|for|try)[^\r\n]+)\{[\t ]*\r?\n"/>
        <property name="message" value="missing blank line before block at same indentation level"/>
    </module>

    <!-- require blank after } in the same indentation level -->
    <module name="RegexpMultiline">
        <!-- \n<indentation>}\n<same indentation><whatever unless newline, '}' or starting with cas(e) or def(ault)> -->
        <property name="format" value="(?&lt;=\n)([\t]+)\}\r?\n\1(?:[^\r\n\}cd]|c[^\r\na]|ca[^\r\ns]|d[^\r\ne]|de[^\r\nf])"/>
        <property name="message" value="missing blank line after block at same indentation level"/>
    </module>

    <module name="TreeWalker">
        <!-- Allow "//CHECKSTYLE.OFF: <InspectionName>" and "//CHECKSTYLE.ON: <InspectionName>" pairs to toggle some inspections -->
        <module name="SuppressionCommentFilter">
            <property name="offCommentFormat" value="CHECKSTYLE.OFF\: ([\w\|]+)"/>
            <property name="onCommentFormat" value="CHECKSTYLE.ON\: ([\w\|]+)"/>
            <property name="checkFormat" value="$1"/>
        </module>

        <module name="IllegalImport" />
        <module name="RedundantImport" />
        <module name="UnusedImports" />

        <module name="ImportOrder">
            <property name="groups" value="java,javax,*" />
            <property name="ordered" value="false" />
            <property name="separated" value="true" />
            <property name="option" value="top" />
        </module>

        <!-- Ensures braces are at the end of a line -->
        <module name="LeftCurly" />

        <module name="RightCurly" />

        <!-- single line statements on one line, -->
        <module name="NeedBraces">
            <property name="tokens" value="LITERAL_IF,LITERAL_FOR,LITERAL_WHILE"/>
            <property name="allowSingleLineStatement" value="true"/>
        </module>

        <module name="NeedBraces">
            <property name="tokens" value="LITERAL_ELSE,LITERAL_DO"/>
            <property name="allowSingleLineStatement" value="false"/>
        </module>

        <module name="EmptyLineSeparator">
            <property name="allowNoEmptyLineBetweenFields" value="true"/>
            <property name="allowMultipleEmptyLines" value="false"/>
            <!-- exclude  METHOD_DEF and VARIABLE_DEF -->
            <property name="tokens" value="PACKAGE_DEF,IMPORT,STATIC_IMPORT,CLASS_DEF,INTERFACE_DEF,ENUM_DEF,STATIC_INIT,INSTANCE_INIT,CTOR_DEF"/>
        </module>

        <module name="OperatorWrap"/>

        <module name="SeparatorWrap">
            <property name="tokens" value="DOT,ELLIPSIS,AT"/>
            <property name="option" value="nl"/>
        </module>

        <module name="SeparatorWrap">
            <property name="tokens" value="COMMA,SEMI"/>
            <property name="option" value="eol"/>
        </module>

        <module name="Indentation">
            <property name="basicOffset" value="4"/>
            <property name="caseIndent" value="0"/>
            <property name="throwsIndent" value="4"/>
            <property name="arrayInitIndent" value="4"/>
            <property name="lineWrappingIndentation" value="8"/>
        </module>

        <module name="ParenPad"/>
        <module name="NoWhitespaceBefore"/>

        <module name="NoWhitespaceAfter">
            <!-- allow ARRAY_INIT -->
            <property name="tokens" value="AT,INC,DEC,UNARY_MINUS,UNARY_PLUS,BNOT,LNOT,DOT,ARRAY_DECLARATOR,INDEX_OP"/>
        </module>
        <module name="WhitespaceAfter"/>
        <module name="WhitespaceAround">
            <!-- Allow PLUS, MINUS, MUL, DIV as they may be more readable without spaces in some cases -->
            <property name="tokens" value="ASSIGN,BAND,BAND_ASSIGN,BOR,BOR_ASSIGN,BSR,BSR_ASSIGN,BXOR,BXOR_ASSIGN,COLON,DIV_ASSIGN,DO_WHILE,EQUAL,GE,GT,LAMBDA,LAND,LCURLY,LE,LITERAL_CATCH,LITERAL_DO,LITERAL_ELSE,LITERAL_FINALLY,LITERAL_FOR,LITERAL_IF,LITERAL_RETURN,LITERAL_SWITCH,LITERAL_SYNCHRONIZED,LITERAL_TRY,LITERAL_WHILE,LOR,LT,MINUS_ASSIGN,MOD,MOD_ASSIGN,NOT_EQUAL,PLUS_ASSIGN,QUESTION,RCURLY,SL,SLIST,SL_ASSIGN,SR,SR_ASSIGN,STAR,STAR_ASSIGN,LITERAL_ASSERT,TYPE_EXTENSION_AND"/>
        </module>
        <module name="SingleSpaceSeparator"/>
        <module name="GenericWhitespace"/>
        <module name="CommentsIndentation"/>

        <module name="ArrayTypeStyle"/>
        <module name="DefaultComesLast">
            <property name="skipIfLastAndSharedWithCase" value="true"/>
        </module>
        <module name="SimplifyBooleanExpression"/>
        <module name="SimplifyBooleanReturn"/>
        <module name="StringLiteralEquality"/>

        <module name="ModifierOrder"/>
        <module name="RedundantModifier"/>

        <module name="AnnotationLocation"/>
        <module name="MissingOverride"/>

        <!-- By default this allows catch blocks with only comments -->
        <module name="EmptyCatchBlock"/>

        <module name="OuterTypeFilename"/>
        <module name="PackageDeclaration"/>

        <module name="PackageName">
            <!-- Package format: {group}.{project name}...

            Examples:
            - com.pocolifo.test
            - me.youngermax.myproject.account
            - net.example.exampleproject.works
            - mypackage

            Non-examples:
            - com.pocolifo
            - com.pocolifo.test_package
            - COM.pocolIFO.test
            - com.test example.hello
            - org.example.hello3 -->

            <property name="format" value="^([a-z]+\.)*([a-z]+)$"/>
<!--            <property name="message" value="Package names can only containing characters other than lowercase letters of the alphabet are disallowed." />-->
        </module>

        <!--<module name="InvalidJavadocPosition"/>-->
        <module name="JavadocParagraph"/>
        <module name="JavadocStyle"/>
        <module name="AtclauseOrder">
            <property name="tagOrder" value="@param,@return,@throws,@deprecated,@see,@author"/>
        </module>
    </module>
</module>
